// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"cyber-risk-monitor/internal/graph/model"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers: cfg.Resolvers,
	}
}

type Config struct {
	Resolvers ResolverRoot
}

type ResolverRoot interface {
	Asset() AssetResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Scan() ScanResolver
}

type executableSchema struct {
	resolvers ResolverRoot
}

func (e *executableSchema) Schema() *graphql.Schema {
	return nil
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	return func(ctx context.Context) *graphql.Response {
		return &graphql.Response{
			Data: []byte(`{"data": null}`),
		}
	}
}
